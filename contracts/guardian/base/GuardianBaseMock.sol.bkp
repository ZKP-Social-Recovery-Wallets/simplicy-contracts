// SPDX-License-Identifier: MIT

pragma solidity ^0.8.4;

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import "@appliedzkp/semaphore-contracts/interfaces/IVerifier.sol";
import {IGuardian} from "../IGuardian.sol";
import {GuardianBase} from "./GuardianBase.sol";
import {GuardianBaseStorage} from "./GuardianBaseStorage.sol";

contract GuardianMock is IGuardian, GuardianBase, Ownable {
    using GuardianBaseStorage for GuardianBaseStorage.Layout;

    /**
     * @notice initializes the Semaphore verifiers used to verify the user's ZK proofs
     *         and create a new Semaphore groups
     * @param _verifiers: List of Semaphore verifiers (address and related Merkle tree depth).
     * @param groupId: Id of the group
     * @param depth: Depth of the tree
     * @param zeroValue: Zero value of the tree
     */
    constructor(
        Verifier[] memory _verifiers,
        uint256 groupId,
        uint8 depth,
        uint256 zeroValue
    ) public {
        for (uint8 i = 0; i < _verifiers.length; i++) {
            GuardianBaseStorage.layout().verifiers[
                _verifiers[i].merkleTreeDepth
            ] = IVerifier(_verifiers[i].contractAddress);
        }
        // createGroup(groupId, depth, zeroValue, _msgSender());
    }

    function _beforeCreateGroup(
        uint256 groupId,
        uint8 depth,
        uint256 zeroValue
    ) internal virtual override onlyOwner {
        super._beforeCreateGroup(groupId, depth, zeroValue);
    }
}
